import { ref as x, watch as _, defineComponent as w, openBlock as u, createElementBlock as r, normalizeStyle as g, Fragment as y, renderList as v, unref as M, renderSlot as N } from "vue";
function W({ items: t, masonryRef: a, columnsNum: i, columnWidth: m }) {
  const n = x([]);
  _([t, a], () => {
    if (!a.value)
      return;
    n.value.length === 0 && (n.value = d(i));
    const e = t.slice(t.length - 20, t.length);
    c(e);
  }, { immediate: !0 });
  function l(e) {
    n.value = d(e), c(t);
  }
  function d(e) {
    return Array.from({ length: e }).map((o, s) => ({
      items: [],
      height: 0,
      index: s
    }));
  }
  async function c(e) {
    e.forEach((o) => {
      const s = o.width / o.height, k = m / s, f = n.value.reduce(
        (h, p) => p.height < h.height ? p : h
      ).index;
      n.value[f].items.push(o), n.value[f].height += k;
    });
  }
  return {
    columns: n,
    redraw: l
  };
}
const $ = ["data-index"], C = /* @__PURE__ */ w({
  __name: "Masonry",
  props: {
    items: {},
    columnsNum: { default: 3 },
    columnWidth: { default: 200 },
    gap: { default: 20 }
  },
  setup(t) {
    const a = t, i = x(null), { columns: m, redraw: n } = W({
      items: a.items,
      masonryRef: i,
      columnsNum: a.columnsNum,
      columnWidth: a.columnWidth
    });
    return _(() => a.columnsNum, (l) => {
      n(l);
    }), (l, d) => (u(), r("div", {
      ref_key: "masonryRef",
      ref: i,
      style: g({
        gap: `${l.gap}px`,
        display: "flex"
      })
    }, [
      (u(!0), r(y, null, v(M(m), (c, e) => (u(), r("div", {
        key: e,
        "data-index": e,
        style: g(
          {
            gap: `${l.gap}px`,
            width: `${l.columnWidth}px`,
            display: "flex",
            flexDirection: "column"
          }
        )
      }, [
        (u(!0), r(y, null, v(c.items, (o, s) => (u(), r("div", {
          style: {
            display: "flex"
          },
          key: s
        }, [
          N(l.$slots, "default", {
            item: o,
            column: e,
            row: s
          })
        ]))), 128))
      ], 12, $))), 128))
    ], 4));
  }
}), E = {
  install: (t) => {
    t.component("Masonry", C);
  }
};
export {
  C as Masonry,
  E as default
};
